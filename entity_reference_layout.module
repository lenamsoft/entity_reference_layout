<?php

/**
 * @file
 * Contains entity_reference_layout.module.
 */

use Drupal\Core\Render\Element;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\entity_reference_layout\Event\ErlMergeAttributesEvent;

/**
 * Implements hook_help().
 */
function entity_reference_layout_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the entity_reference_layout module.
    case 'help.page.entity_reference_layout':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Entity reference field with layouts') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_view_alter().
 */
function entity_reference_layout_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if (!empty($build['#erl_layout']) && !empty($build['regions']) && \Drupal::service('module_handler')->moduleExists('layout_discovery')) {
    /* @var \Drupal\Core\Layout\LayoutPluginManager @$layout_plugin_manager */
    $layout_plugin_manager = \Drupal::service('plugin.manager.core.layout');
    if (!$layout_plugin_manager->getDefinition($build['#erl_layout'], FALSE)) {
      $messenger = \Drupal::messenger();
      $messenger->addMessage(t('Layout `%layout_id` is unknown.', ['%layout_id' => $build['#erl_layout']]), 'warning');
      return;
    }

    // Provide any configuration to the layout plugin if necessary.
    /* @var \Drupal\Core\Layout\LayoutInterface $layout_instance */
    $layout_instance = $layout_plugin_manager->createInstance($build['#erl_layout'], $build['#erl_layout_config']);

    // This builds the render array.
    $build['_entity_reference_layout'] = [
      '#weight' => 1000,
      'content' => $layout_instance->build($build['regions']),
    ];
    $attributes = !empty($build['_entity_reference_layout']['content']['#attributes']) ? $build['_entity_reference_layout']['content']['#attributes'] : [];

    // @Todo: why were we merging attributes from entity?
    // The layout is rendered inside the entity -- we shouldn't
    // duplicate attributes.
    // if (!empty($build['#attributes'])) {
    // $attributes = array_merge($attributes, $build['#attributes']);
    // }
    if (!empty($build['#erl_layout_options'])) {
      $attributes = entity_reference_layout_merge_attributes($attributes, $build['#erl_layout_options']);
    }

    $build['_entity_reference_layout']['content']['#attributes'] = $attributes;

    unset($build['regions']);
  }
}

/**
 * Prepares variables for `field.html.twig`.
 */
function entity_reference_layout_preprocess_field(&$variables) {

  $element = $variables['element'];
  if ($element['#formatter'] == 'entity_reference_layout') {
    /* @var \Drupal\entity_reference_layout\EntityReferenceLayoutRevisionsFieldItemList $item_list */
    $item_list = $element['#items'];
    $handler_settings = $item_list->getSetting('handler_settings');
    $layout_bundles = $handler_settings['layout_bundles'];
    $variables['items'] = _entity_reference_layout_nest_items($element, $variables['items'], $layout_bundles);
  }
}

/**
 * Helper function to nest references entities into regions within a layout.
 *
 * @param array $element
 *   The field item containing referenced entities.
 * @param array $items
 *   Array of referenced entities.
 * @param array $layout_bundles
 *   Array of bundles (typically paragraph bundles)
 *   that can be associated with layouts.
 */
function _entity_reference_layout_nest_items(array $element, array $items, array $layout_bundles) {

  $nested_items = [];
  foreach ($items as $delta => $item) {
    /* @var \Drupal\Core\Entity\EntityInterface $entity */
    $entity = $element['#items'][$delta]->entity;
    $config = $element['#items'][$delta]->config;
    $options = $element['#items'][$delta]->options;

    $region = !empty($element['#items'][$delta]->region) ? $element['#items'][$delta]->region : '';
    $layout = !empty($element['#items'][$delta]->layout) ? $element['#items'][$delta]->layout : '';

    if (isset($entity) && in_array($entity->bundle(), $layout_bundles)) {
      $item['content']['#erl_layout'] = $layout;
      $item['content']['#erl_layout_config'] = !empty($config) ? $config : [];
      $item['content']['#erl_layout_options'] = $options;
      $section_id = $entity->id();
    }

    // Add items with region or layout value into the rendering list.
    // Disabled items won't have any of them, so they won't be included,
    // and rendered.
    if (!empty($region)) {
      if (empty($nested_items[$section_id]['content']['regions'][$region])) {
        $nested_items[$section_id]['content']['regions'][$region] = [];
      }
      $nested_items[$section_id]['content']['regions'][$region][] = $item['content'];
    }
    elseif (!empty($layout)) {
      $nested_items[$entity->id()] = $item;
    }
  }
  return $nested_items;
}

/**
 * Implements hook_theme().
 */
function entity_reference_layout_theme() {
  return [
    'entity_reference_layout_widget' => [
      'render element' => 'form',
      'function' => 'theme_entity_reference_layout_widget',
    ],
    'entity_reference_layout_radio' => [
      'render element' => 'element',
      'function' => 'theme_entity_reference_layout_radio',
    ],
  ];
}

/**
 * Implements hook_entity_reference_layout_radio().
 *
 * Custom theme hook for adding layout icons
 * and wrapper HTML to layout select radios.
 */
function theme_entity_reference_layout_radio($element) {
  /* @var \Drupal\Core\Layout\LayoutPluginManager $layout_plugin_manager */
  $layout_plugin_manager = \Drupal::service('plugin.manager.core.layout');
  $renderer = \Drupal::service('renderer');
  $layout_name = $element['element']['#return_value'];
  try {
    /* @var \Drupal\Core\Layout\LayoutDefinition $definition */
    $definition = $layout_plugin_manager->getDefinition($layout_name);
    $icon = $definition->getIcon(40, 60, 1, 0);
    $rendered_icon = $renderer->render($icon);

    $layout_item = [
      '#type' => 'container',
      '#prefix' => '<div class="layout-radio-item">',
      '#suffix' => '</div>',
      'icon' => [
        '#prefix' => '<div class="layout-icon-wrapper">',
        '#suffix' => '</div>',
        '#markup' => $rendered_icon,
      ],
      'radio' => [
        '#type' => 'container',
        '#attributes' => [
          // 'class' => ['visually-hidden'],.
        ],
        'item' => ['#markup' => $element['element']['#children']],
      ],
    ];

    return \Drupal::service('renderer')->render($layout_item);
  }
  catch (\Exception $e) {
    watchdog_exception('entity_reference_layout', $e);
  }

}

/**
 * Merges $layout_options into an $attributes array.
 *
 * Returned attributes are passed to a rendered layout,
 * typically with custom classes to be applied although can
 * include other data useful to rendering.
 *
 * Leverages even dispatcher pattern so other modules
 * can add data to attributes.
 */
function entity_reference_layout_merge_attributes(array $attributes, array $layout_options) {
  if (!empty($layout_options)) {
    if (!empty($layout_options['options']['container_classes'])) {
      $attributes['class'][] = $layout_options['options']['container_classes'];
    }
    if (!empty($layout_options['options']['bg_color'])) {
      $attributes['style'] = ['background-color: ' . $layout_options['options']['bg_color']];
    }
  }

  $event = new ErlMergeAttributesEvent($attributes, $layout_options);
  $event_dispatcher = \Drupal::service('event_dispatcher');
  $event_dispatcher->dispatch(ErlMergeAttributesEvent::EVENT_NAME, $event);

  return $attributes;
}

/**
 * Helper function to sort array items by '_weight'.
 */
function _erl_widget_sort_helper($a, $b) {
  $a_weight = is_array($a) && isset($a['_weight']['#value']) ? $a['_weight']['#value'] : 0;
  $b_weight = is_array($b) && isset($b['_weight']['#value']) ? $b['_weight']['#value'] : 0;
  return $a_weight - $b_weight;
}

/**
 * Themes the "ERL" field widget.
 *
 * @param array $variables
 *   Contains the form element data from $element['entities'].
 */
function theme_entity_reference_layout_widget(array $variables) {

  $form = $variables['form'];
  $build = [
    '#type' => 'fieldset',
    '#id' => $form['#id'],
    '#attributes' => ['class' => ['erl-field']],
    '#title' => $form['#title'],
    // These get moved around with JS.
    'add_more' => ['#weight' => 998] + $form['add_more'],
    // Container for layouts.
    'layout_items' => [
      '#type' => 'container',
      '#attributes' => ['class' => ['erl-layout-wrapper']],
    ],
    // Container for disabled / orphaned items.
    'disabled' => [
      '#type' => 'fieldset',
      '#attributes' => ['class' => ['erl-disabled-items']],
      '#weight' => 999,
      '#title' => t('Disabled Items'),
      'items' => [
        '#type' => 'container',
        '#attributes' => ['class' => ['erl-disabled-wrapper']],
        'description' => [
          '#type' => 'html_tag',
          '#tag' => 'div',
          '#attributes' => [
            'class' => [
              'erl-disabled-items__description',
            ],
          ],
          '#value' => t('Drop items here that you want to keep disabled / hidden, without removing them permanently.'),
        ],
      ],
    ],
  ];
  $new_items = [];
  $form_with_layout = [];
  $renderer = \Drupal::service('renderer');
  /* @var \Drupal\Core\Layout\LayoutPluginManager @$layout_plugin_manager */
  $layout_plugin_manager = \Drupal::service('plugin.manager.core.layout');

  $items = [];
  foreach (Element::children($form) as $key) {
    if ($key !== 'add_more') {
      // If there is an open entity form,
      // move it to it's own section of the widget form.
      if (!empty($form[$key]['entity_form'])) {
        $build['entity_form'] = $form[$key]['entity_form'] + [
          '#weight' => 1000,
        ];
        $build['entity_form']['#attributes']['class'][] = 'erl-entity-form';
        unset($form[$key]['entity_form']);
      }
      // If there is an open remove confirmation form,
      // move it to it's own section of the widget form.
      if (!empty($form[$key]['remove_form'])) {
        $build['remove_form'] = $form[$key]['remove_form'] + [
          '#weight' => 1000,
        ];
        unset($form[$key]['remove_form']);
      }
      $items[] =& $form[$key];
    }
  }
  usort($items, '_erl_widget_sort_helper');

  $has_non_layout_items = FALSE;
  $section_key = NULL;
  foreach ($items as $key => &$item) {

    // Merge and add attributes.
    $attributes = entity_reference_layout_merge_attributes($item['#attributes'], $item['#layout_options']);
    $item['#attributes'] = $attributes;

    // Set the weight for sorted list items.
    $item['#weight'] = $key;

    // If this is a layout we'll populate regions below.
    $item['#regions'] = [
      '#attributes' => [
        'class' => [],
      ],
    ];

    // Add class for weight element.
    if (!empty($item['_weight'])) {
      $item['_weight']['#attributes']['class'] = ['erl-weight'];
      // Move to top of container to ensure items are given the correct delta.
      $item['_weight']['#weight'] = -1000;
      $item['_weight']['#theme_wrappers'] = [
        'container' => ['#attributes' => ['class' => ['hidden']]],
      ];
    }

    // Stash new items for processing later.
    if (!empty($item['#is_new'])) {
      $new_items[] = $item;
    }
    // If the element has a layout, structure it as a layout container.
    elseif (!empty($item['layout']['#value'])) {
      $section_key = $key;
      $form_with_layout['section_' . $section_key] = $items[$section_key];
      $form_with_layout['section_' . $section_key]['#attributes']['class'][] = 'erl-layout';
      $layout_instance = $layout_plugin_manager->createInstance($items[$section_key]['layout']['#value'], $items[$section_key]['config']['#value']);
      foreach ($layout_instance->getPluginDefinition()->getRegionNames() as $region_name) {
        $form_with_layout['section_' . $section_key]['#regions'][$region_name] = [
          '#attributes' => [
            'class' => [
              'erl-layout-region',
              'erl-layout-region--' . $region_name,
            ],
          ],
        ];
      }
    }
    // If the element has a region, add it into the correct
    // region within the layout container.
    // Or if the specified region doesn't exist, add it to the list
    // of "disabled" items.
    elseif (!empty($item['region']['#value']) && isset($form_with_layout['section_' . $section_key]['#regions'][$item['region']['#value']])) {
      $form_with_layout['section_' . $section_key]['#regions'][$item['region']['#value']][] = $item;
      $has_non_layout_items = TRUE;
    }
    else {
      $build['disabled']['items'][] = $item;
      $has_non_layout_items = TRUE;
    }
  }

  // Move new items into correct position, if applicable.
  foreach ($new_items as $key => $item) {
    $section_key = $item['#parent_weight'];

    // Layout items.
    if (empty($item['#new_region'])) {
      $item['#weight'] = $item['#parent_weight'] + .5;
      $form_with_layout['new_section_' . $key] = $item;
    }

    // Items to add into regions.
    if (isset($item['#new_region'])) {
      $region_name = $item['#new_region'];
      if (isset($form_with_layout['section_' . $section_key]['#regions'][$region_name])) {
        $form_with_layout['section_' . $section_key]['#regions'][$region_name][] = $item;
      }
    }
  }

  foreach ($form_with_layout as $key => $section) {
    if (!empty($section['layout']['#value'])) {
      $layout_instance = $layout_plugin_manager->createInstance($section['layout']['#value'], $section['config']['#value']);
      $rendered_regions = $layout_instance->build($section['#regions']);
      $section['#regions']['#attributes']['class'][] = 'erl-layout__regions';
      $section['preview']['content'] = [
        '#weight' => 1000,
        'regions' => $rendered_regions,
      ];
    }
    $build['layout_items'][] = $section;
  }

  // If there are no items, don't show the disabled region.
  if (!$has_non_layout_items) {
    unset($build['disabled']);
  }

  // Add a container so Javascript can respond to empty state.
  if (count($items) == 0) {
    $build['empty_container'] = [
      '#type' => 'container',
      '#attributes' => ['class' => ['erl-empty']],
    ];
  }

  $build['#attached']['library'][] = 'entity_reference_layout/erl_widget';
  $build['#attached']['library'][] = 'core/drupal.dialog.ajax';
  return $renderer->render($build);
}

/**
 * Implements hook_form_FORM_ID_alter() for 'field_ui_field_storage_add_form'.
 */
function entity_reference_layout_form_field_ui_field_storage_add_form_alter(array &$form) {
  if (isset($form['add']['new_storage_type']['#options'][(string) t('Reference revisions')]['field_ui:entity_reference_layout_revisioned:paragraph'])) {
    // @todo Figure out why this option breaks the field config form
    // and reintroduce it if possible.
    // See https://www.drupal.org/project/entity_reference_layout/issues/3041126
    unset($form['add']['new_storage_type']['#options'][(string) t('Reference revisions')]['field_ui:entity_reference_layout_revisioned:paragraph']);
  }
}
